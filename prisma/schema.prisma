// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id             Int              @id @default(autoincrement())
  name           String
  universities   University[]
  studenthousing Studenthousing[]
}

model Studenthousing {
  id        Int     @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  users     User[]
  chatId    String? @unique // Foreign key to Chat (optional initially)
  chat      Chat?   @relation(fields: [chatId], references: [id]) // One-to-one relationship
  cityId    Int // City ID
  city      City    @relation(fields: [cityId], references: [id])
}

model User {
  id              String  @id @default(cuid()) // Clerk's ID as String
  name            String
  email           String  @unique
  phoneNumber     String?
  profileImageUrl String?

  preferredRadius Int?
  isOnboarded     Boolean @default(false)

  // Studenthousing
  StudenthousingId Int?
  Studenthousing   Studenthousing? @relation(fields: [StudenthousingId], references: [id])

  // University
  universityId Int?
  university   University? @relation(fields: [universityId], references: [id])

  // Chat
  messages    Message[]
  chatMembers ChatMember[]

  // Listings
  listings Listing[]

  // Payment
  balance         Float   @default(0)
  stripeAccountId String? // NEW FIELD
}

model University {
  id     Int    @id @default(autoincrement())
  name   String @unique
  users  User[]
  cityId Int
  city   City   @relation(fields: [cityId], references: [id])
}

// Chat Model
model Chat {
  id        String   @id @default(cuid())
  name      String? // Optional for group chats
  isGroup   Boolean  @default(false) // Is this a group chat?
  createdAt DateTime @default(now()) // Timestamp when chat is created

  messages Message[] // Messages in the chat
  members  ChatMember[] // Users in the chat

  housing Studenthousing? // Relation (no references here!)

  Swap Swap[]
}

// Members of Chat Model
model ChatMember {
  id       String   @id @default(cuid())
  chatId   String // Chat ID
  userId   String // Clerk's ID as String
  role     String   @default("member") // Roles: admin, member, etc.
  joinedAt DateTime @default(now()) // When the user joined the chat

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

// Messages in Chat Model
model Message {
  id        String @id @default(cuid())
  chatId    String // Chat ID
  senderId  String // Clerk's ID as String
  content   String // Message content
  type      String @default("text") // "text", "productCard", "swapProposal"
  listingId Int? // Optional foreign key to Listing

  // for swap proposals
  swapId String? // Optional foreign key to Swap

  createdAt DateTime @default(now()) // Timestamp when sent

  chat   Chat  @relation(fields: [chatId], references: [id])
  sender User  @relation(fields: [senderId], references: [id])
  swap   Swap? @relation(fields: [swapId], references: [id])
}

enum Category {
  ALL
  TEXTBOOKS
  ELECTRONICS
  FURNITURE
  KITCHENWARE
  FREE_STUFF
  OTHER
  // ...add more as needed
}

enum Condition {
  NEW
  USED
  LIKE_NEW
  // ...add more as needed
}

model Listing {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  price     Float? // Nullable for free stuff and swaps
  category  Category // e.g., "Textbooks", "Electronics", etc.
  latitude  Float
  longitude Float
  userId    String // clerk's ID
  ImageUrl  String

  swapPreferences String? // <--- NEW: optional field for swap preferences

  createdAt DateTime @default(now())

  // new 
  locationName String? // Optional location name like Sandarna, GÃ¶teborg
  condition    Condition?

  user   User   @relation(fields: [userId], references: [id])
  swapsA Swap[] @relation("ListingA")
  swapsB Swap[] @relation("ListingB")
}

model Swap {
  id          String    @id @default(cuid())
  proposerId  String // The user who initiated the swap
  recipientId String // The other user
  status      String    @default("pending") // e.g., "pending", "accepted", "declined", "cancelled"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pickupTime  DateTime? // Optional pickup time

  pickupLat Float?
  pickupLng Float?

  //  confirmation code
  confirmationCode String? // Could store a random code or token

  // 1) listingA references Listing
  listingAId Int
  listingA   Listing @relation("ListingA", fields: [listingAId], references: [id])

  // 2) listingB references Listing
  listingBId Int
  listingB   Listing @relation("ListingB", fields: [listingBId], references: [id])
  // Example extra fields to store the status of the swap:

  // 
  partialCash Float? // Partial cash amount for swap

  note String? // Optional note for the swap

  Message Message[]

  // NEW FIELDS:
  chatId String? // optional: not all deals might have a chat
  chat   Chat?   @relation(fields: [chatId], references: [id])
}
